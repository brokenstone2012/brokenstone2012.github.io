<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pug语法</title>
      <link href="/2024/09/19/pug%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/09/19/pug%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div><blockquote><p>Pug – robust, elegant, feature rich template engine for Node.js</p></blockquote><p><code>pug</code>原名<code>jade</code>,因版权问题更名为<code>pug</code>,即哈巴狗。与<code>hexo</code>默认模块<code>ejs</code>一样，<code>pug</code>也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题<code>manupassant</code>也使用了<code>pug</code>。</p><p>本文针对<code>Hexo</code>中使用<code>pug</code>的情况为例，说明其基本语法。</p><h2 class="heading" data-id="heading-0" id="1927677622"><span>安装<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#1927677622" class="esa-anchor" style="opacity: 0;">#</a></h2><div class="cnblogs_code"><pre><span style="color: rgba(0, 0, 0, 1)"># common installnpm install pug<h1 id="install-for-hexo-blog"><a href="#install-for-hexo-blog" class="headerlink" title="install for hexo blog"></a>install </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> hexo blog</h1><p>npm install hexo</span>-renderer-pug –save</pre></p></div><h2 class="heading" data-id="heading-1" id="3395789642"><span>语法<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#3395789642" class="esa-anchor" style="opacity: 0;">#</a></h2><p><code>pug</code>不同于<code>html</code>，前者不需要标签的开和闭，如<code>html</code>的<code>&lt;p&gt;Demo&lt;/p&gt;</code>，在<code>pug</code>使用<code>p Demo</code>即可。</p><h3 class="heading" data-id="heading-2" id="657568236"><span>缩进<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#657568236" class="esa-anchor" style="opacity: 0;">#</a></h3><p><code>pug</code>对空格敏感，有点类似<code>python</code>对制表符<code>tab</code>敏感。<code>pug</code>使用空格作为缩进符，当然用soft tab也可行。同一级标签需保证左对齐。</p><div class="cnblogs_code"><pre><span style="color: rgba(0, 0, 0, 1)">div    p Hello, world</span>!<span style="color: rgba(0, 0, 0, 1)">    p Hello, pug.</span></pre></div><p>渲染结果如下：</p><div class="cnblogs_code"><pre>&lt;div&gt;    &lt;p&gt;Hellow, world!&lt;/p&gt;    &lt;p&gt;Hello, pug.&lt;/p&gt;&lt;/div&gt;</pre></div><h3 class="heading" data-id="heading-3" id="2684449589"><span>注释<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#2684449589" class="esa-anchor" style="opacity: 0;">#</a></h3><p><code>pug</code>使用<code>//-</code>或<code>//</code>对代码进行注释，前者注释内容不出现在渲染后的<code>html</code>文件中，后者反之。</p><div class="cnblogs_code"><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- html中不包含此行</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> html中会包含此行</span></pre></div><h3 class="heading" data-id="heading-4" id="3652243989"><span>属性<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#3652243989" class="esa-anchor" style="opacity: 0;">#</a></h3><p><code>pug</code>将标签属性存放于括号<code>()</code>内，多个属性之间以逗号或空格分隔。此外，对于标签的<code>id</code>和<code>class</code>，<code>pug</code>使用<code>#</code>紧跟标签<code>id</code>,使用<code>.</code>紧跟标签<code>class</code>，可以同时设置多个<code>class</code>。</p><div class="cnblogs_code"><pre><span style="color: rgba(0, 0, 0, 1)">h1#title Test titleimg#name.class1.class2(src</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/test.png</span><span style="color: rgba(128, 0, 0, 1)">"</span> alt=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">test</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre></div><p>↓</p><div class="cnblogs_code"><pre>&lt;h1 id=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;Test title&lt;/h1&gt;&lt;img id=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">class</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">class1 class2</span><span style="color: rgba(128, 0, 0, 1)">"</span> src=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/test.png</span><span style="color: rgba(128, 0, 0, 1)">"</span> alt=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">test</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;</pre></div><pre class="highlighter-hljs" highlighted="true"><code class="hljs html copyable highlighter-hljs language-xml" lang="html">&nbsp;</code></pre><h3 class="heading" data-id="heading-5" id="3817915792"><span>包含<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#3817915792" class="esa-anchor" style="opacity: 0;">#</a></h3><p>为了方便代码复用，<code>pug</code>提供了<code>include</code>包含功能，以下代码会将<code>_partial</code>目录下的<code>head.pug</code>文件内容包含到当前调用的位置。有点<code>C/C++</code>中内联函数的意思。</p><div class="cnblogs_code"><pre><span style="color: rgba(0, 0, 0, 1)">doctype htmlhtml(lang</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">en</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    include _partial</span>/head.pug</pre></div><h3 class="heading" data-id="heading-6" id="1760707796"><span>继承<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#1760707796" class="esa-anchor">#</a></h3><p>下面是一个简单的<code>base</code>模板，通过<code>block</code>定义了页面头部<code>head</code>和内容<code>body</code>。块<code>block</code>有点类似<code>C/C++</code>的抽象函数，需要在继承者中完成定义，填充具体内容。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- base.pug</span><span style="color: rgba(0, 0, 0, 1)">html    head        block title    body        block content</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>以下文件使用<code>extends</code>继承以上模板，通过<code>block</code>覆盖或替换原有块<code>block</code>。当然，继承者也可以在原有基础上继续扩展。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- index.pug</span>extends <span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.pug<p>block title<br>    title </span><span style="color: rgba(128, 0, 0, 1)">“</span><span style="color: rgba(128, 0, 0, 1)">Test title</span><span style="color: rgba(128, 0, 0, 1)">“</span><span style="color: rgba(0, 0, 0, 1)"></p><p>block content<br>    h1 Hello world</span>!<span style="color: rgba(0, 0, 0, 1)"><br>    block article</span></pre></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3 class="heading" data-id="heading-7" id="596157311"><span>定义变量<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#596157311" class="esa-anchor">#</a></h3><p><code>pug</code>中通过<code>- var name = value</code>的形式定义变量</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>- <span style="color: rgba(0, 0, 255, 1)">var</span> intData = <span style="color: rgba(128, 0, 128, 1)">100</span>- <span style="color: rgba(0, 0, 255, 1)">var</span> boolData = <span style="color: rgba(0, 0, 255, 1)">false</span>- <span style="color: rgba(0, 0, 255, 1)">var</span> stringData = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">p.</span><span style="color: rgba(0, 0, 255, 1)">int</span>=<span style="color: rgba(0, 0, 0, 1)"> intDatap.</span><span style="color: rgba(0, 0, 255, 1)">bool</span>=<span style="color: rgba(0, 0, 0, 1)"> boolDatap.stringData</span>= stringData</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><blockquote><p>需注意的是，在引用变量时，需要在引用位置加上<code>=</code>号，否则会默认将变量名当成普通字符串使用。</p></blockquote><p>如果想要将变量与其它字符串常量或是变量连接在一起，就不能用等号了，而是应该用<code>#&#123;&#125;</code>，该符号会对大括号内的变量进行求值和转义，最终得到渲染输出的内容。</p><div class="cnblogs_code"><pre>- <span style="color: rgba(0, 0, 255, 1)">var</span> girl = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Lily</span><span style="color: rgba(128, 0, 0, 1)">'</span>- <span style="color: rgba(0, 0, 255, 1)">var</span> boy = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Jack</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">p #{girl} </span><span style="color: rgba(0, 0, 255, 1)">is</span> so beautiful!<span style="color: rgba(0, 0, 0, 1)">p And #{boy} </span><span style="color: rgba(0, 0, 255, 1)">is</span> handsome.</pre></div><h3 class="heading" data-id="heading-8" id="1091456314"><span>条件结构<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#1091456314" class="esa-anchor">#</a></h3><p><code>pug</code>的条件语句与其它语言类似，均是如下这般：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>- <span style="color: rgba(0, 0, 255, 1)">var</span> A = {value: <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">}</span>- <span style="color: rgba(0, 0, 255, 1)">var</span> B = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> A.value    p</span>=<span style="color: rgba(0, 0, 0, 1)"> A.value</span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> B    p</span>=<span style="color: rgba(0, 0, 0, 1)"> B</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">    p nothing</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3 class="heading" data-id="heading-9" id="2804751102"><span>迭代<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#2804751102" class="esa-anchor">#</a></h3><p><code>pug</code>中使用<code>each</code>和<code>while</code>实现循环迭代，<code>each</code>可以返回当前所在项的索引值，默认从0开始计数。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- each</span><span style="color: rgba(0, 0, 0, 1)">ol    each item </span><span style="color: rgba(0, 0, 255, 1)">in</span> [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Sun</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Mon</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Tus</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Wen</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Thu</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Fri</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Sat</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]        li</span>=<span style="color: rgba(0, 0, 0, 1)"> item<p></span><span style="color: rgba(0, 128, 0, 1)">&#x2F;&#x2F;</span><span style="color: rgba(0, 128, 0, 1)">- get index of each</span></p><ul><li><span style="color: rgba(0, 0, 255, 1)">var</span> week &#x3D; [<span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Sun</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Mon</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Tus</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Wen</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Thu</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Fri</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">Sat</span><span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(0, 0, 0, 1)">]<br>ol<br>  each item, index </span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> week<br>  li</span>&#x3D; index + <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">:</span><span style="color: rgba(128, 0, 0, 1)">‘</span> + item</pre></li></ul><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>↓</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;ol&gt;  &lt;li&gt;Sun&lt;/li&gt;  &lt;li&gt;Mon&lt;/li&gt;  &lt;li&gt;Tus&lt;/li&gt;  &lt;li&gt;Wen&lt;/li&gt;  &lt;li&gt;Thu&lt;/li&gt;  &lt;li&gt;Fri&lt;/li&gt;  &lt;li&gt;Sat&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">0</span>:Sun&lt;/li&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">1</span>:Mon&lt;/li&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">2</span>:Tus&lt;/li&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">3</span>:Wen&lt;/li&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">4</span>:Thu&lt;/li&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">5</span>:Fri&lt;/li&gt;  &lt;li&gt;<span style="color: rgba(128, 0, 128, 1)">6</span>:Sat&lt;/li&gt;&lt;/ol&gt;</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p><code>while</code>调用方式如下：</p><div class="cnblogs_code"><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- while</span>- <span style="color: rgba(0, 0, 255, 1)">var</span> day = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">ul    </span><span style="color: rgba(0, 0, 255, 1)">while</span> day &lt; <span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">        li</span>= day++</pre></div><h3 class="heading" data-id="heading-10" id="525420919"><span>Minix<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#525420919" class="esa-anchor">#</a></h3><p><code>mixin</code>名曰<strong>混入</strong>，类似其它编程语言中的<strong>函数</strong>，也是为了代码复用，可带参数或不带参数，定义方式如下：</p><div class="cnblogs_code"><pre>mixin menu-<span style="color: rgba(0, 0, 0, 1)">item(href, name)    li        span.dot ●        a(href</span>=href)= name</pre></div><p>其中，<code>menu-item</code>为调用时所用名称，可认为是函数名，<code>href</code>及<code>name</code>是参数。同上<a href="#%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F" target="_blank" rel="noopener nofollow">定义变量</a>所说，<code>a(href=href)= name</code>中第二个<code>=</code>是为了将后面的<code>name</code>当作参数来处理，而不是当作字符串"name"来处理。</p><p>调用<code>mixin</code>定义的代码块，需通过<code>+</code>号紧跟<code>mixin</code>名称及参数:</p><div class="cnblogs_code"><pre>+menu-item(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/Archives</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Archives</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)</span>+menu-item(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/About</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">About</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre></div><p><code>mixin</code>之所以称为混入，是因为其语法不局限于函数调用，在<code>mixin</code>可以使用块<code>block</code></p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 0, 0, 1)">mixin print(post)    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> block        block    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">        p</span>=<span style="color: rgba(0, 0, 0, 1)"> post<p></span>+print(<span style="color: rgba(128, 0, 0, 1)">“</span><span style="color: rgba(128, 0, 0, 1)">no block</span><span style="color: rgba(128, 0, 0, 1)">“</span><span style="color: rgba(0, 0, 0, 1)">)<br></span>+print(<span style="color: rgba(128, 0, 0, 1)">“”</span><span style="color: rgba(0, 0, 0, 1)">)<br>    div.box<br>        p </span><span style="color: rgba(0, 0, 255, 1)">this</span> <span style="color: rgba(0, 0, 255, 1)">is</span> the content of block</pre></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>↓</p><div class="cnblogs_code"><pre>&lt;p&gt;no block&lt;/p&gt;&lt;div <span style="color: rgba(0, 0, 255, 1)">class</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">box</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;&lt;p&gt;<span style="color: rgba(0, 0, 255, 1)">this</span> <span style="color: rgba(0, 0, 255, 1)">is</span> the content of block&lt;/p&gt;&lt;/div&gt;</pre></div><h3 class="heading" data-id="heading-11" id="1819458277"><span>JavaScript<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#1819458277" class="esa-anchor">#</a></h3><p>注意以下<code>pug</code>语句中第一行的<code>.</code>号。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>script(type=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/javascript</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">).    </span><span style="color: rgba(0, 0, 255, 1)">var</span> data = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">"</span>    <span style="color: rgba(0, 0, 255, 1)">var</span> enable = <span style="color: rgba(0, 0, 255, 1)">true</span>    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> enable        console.log(data)    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">        console.log(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">nothing</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>↓</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;script type=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/javascript</span><span style="color: rgba(128, 0, 0, 1)">'</span>&gt;    <span style="color: rgba(0, 0, 255, 1)">var</span> data = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">"</span>    <span style="color: rgba(0, 0, 255, 1)">var</span> enable = <span style="color: rgba(0, 0, 255, 1)">true</span>    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> enable        console.log(data)    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">        console.log(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">nothing</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)</span>&lt;/script&gt;</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>对于简单脚本，使用<code>pug</code>尚可，复杂的还是单独写到<code>.js</code>文件中，然后通过<code>pug</code>引用方便一些，引用方式如下：</p><div class="cnblogs_code"><pre>script(type=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/javascript</span><span style="color: rgba(128, 0, 0, 1)">'</span>, src=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/path/to/js</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)<p></span><span style="color: rgba(0, 128, 0, 1)">&#x2F;&#x2F;</span><span style="color: rgba(0, 128, 0, 1)">- with hexo function url_for</span><br>script(type&#x3D;<span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">text&#x2F;javascript</span><span style="color: rgba(128, 0, 0, 1)">‘</span>, src&#x3D;url_for(theme.js) + <span style="color: rgba(128, 0, 0, 1)">‘</span><span style="color: rgba(128, 0, 0, 1)">&#x2F;ready.js</span><span style="color: rgba(128, 0, 0, 1)">‘</span>)</pre></p></div><h3 class="heading" data-id="heading-12" id="3458073758"><span>hexo 相关<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#3458073758" class="esa-anchor">#</a></h3><p>在<code>hexo</code>主题中使用<code>pug</code>时，可以通过使用<code>hexo</code>提供的全局变量<code>config</code>，<code>theme</code>来分别调用博客根目录下<code>_config.yml</code>文件中的参数以及主题根目录下<code>_config.yml</code>文件中的参数。</p><div class="cnblogs_code"><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- blog config</span>p=<span style="color: rgba(0, 0, 0, 1)"> config.description<p></span><span style="color: rgba(0, 128, 0, 1)">&#x2F;&#x2F;</span><span style="color: rgba(0, 128, 0, 1)">- theme config</span><br>p&#x3D; theme.title</pre></p></div><p>&nbsp;</p><pre class="highlighter-hljs" highlighted="true"><code class="hljs pug copyable highlighter-hljs language-undefined" lang="pug">复制代码</code></pre><p>当然，<code>pug</code>中可以直接使用<code>hexo</code>提供的其它全局变量及辅助函数，使用方法详见<code>hexo</code>的<a href="https://hexo.io/zh-cn/docs/variables" rel="noopener nofollow" target="_blank">文档</a></p><h2 class="heading" data-id="heading-13" id="997824657"><span>示例<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#997824657" class="esa-anchor">#</a></h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- head.pug</span><span style="color: rgba(0, 0, 0, 1)">head    meta(http</span>-equiv=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">content-type</span><span style="color: rgba(128, 0, 0, 1)">'</span>, content=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/html; charset=utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    meta(content</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0</span><span style="color: rgba(128, 0, 0, 1)">'</span>, name=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">viewport</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    meta(content</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yes</span><span style="color: rgba(128, 0, 0, 1)">'</span>, name=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">apple-mobile-web-app-capable</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    meta(content</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black-translucent</span><span style="color: rgba(128, 0, 0, 1)">'</span>, name=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">apple-mobile-web-app-status-bar-style</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    meta(content</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">telephone=no</span><span style="color: rgba(128, 0, 0, 1)">'</span>, name=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">format-detection</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    meta(name</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">description</span><span style="color: rgba(128, 0, 0, 1)">'</span>, content=<span style="color: rgba(0, 0, 0, 1)">config.description)    block title    link(rel</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">stylesheet</span><span style="color: rgba(128, 0, 0, 1)">'</span>, type=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/css</span><span style="color: rgba(128, 0, 0, 1)">'</span>, href=url_for(theme.css) + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/style.css</span><span style="color: rgba(128, 0, 0, 1)">'</span> + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">?v=</span><span style="color: rgba(128, 0, 0, 1)">'</span> +<span style="color: rgba(0, 0, 0, 1)"> theme.version)    link(rel</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Shortcut Icon</span><span style="color: rgba(128, 0, 0, 1)">'</span>, type=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image/x-icon</span><span style="color: rgba(128, 0, 0, 1)">'</span>, href=url_for(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">favicon.png</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))    script(type</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/javascript</span><span style="color: rgba(128, 0, 0, 1)">'</span>, src=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">//cdn.bootcss.com/jquery/3.3.1/jquery.min.js</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    block more</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">- base.pug</span><span style="color: rgba(0, 0, 0, 1)">doctype htmlhtml(lang</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">en</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    include _partial</span>/<span style="color: rgba(0, 0, 0, 1)">head.pug    block more        link(rel</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">stylesheet</span><span style="color: rgba(128, 0, 0, 1)">'</span>, type=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/css</span><span style="color: rgba(128, 0, 0, 1)">'</span>, href=url_for(theme.plugins) + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/prettify/doxy.css</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)        script(type</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">text/javascript</span><span style="color: rgba(128, 0, 0, 1)">'</span>, src=url_for(theme.js) + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/ready.js</span><span style="color: rgba(128, 0, 0, 1)">'</span> + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">?v=</span><span style="color: rgba(128, 0, 0, 1)">'</span> + theme.version, <span style="color: rgba(0, 0, 255, 1)">async</span><span style="color: rgba(0, 0, 0, 1)">)    <pre><code>&lt;/span&gt;&lt;span style=&quot;color: rgba(0, 128, 0, 1)&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgba(0, 128, 0, 1)&quot;&gt;- body&lt;/span&gt;</code></pre><p><span style="color: rgba(0, 0, 0, 1)">    body: #container.box<br>        .h</span>-<span style="color: rgba(0, 0, 0, 1)">wrapper<br>            include _partial</span>&#x2F;nav-<span style="color: rgba(0, 0, 0, 1)">menu.pug<br>        </span><span style="color: rgba(0, 128, 0, 1)">&#x2F;&#x2F;</span><span style="color: rgba(0, 128, 0, 1)"> article content</span><br><span style="color: rgba(0, 0, 0, 1)">        block content</p><pre><code>    include _partial&lt;/span&gt;/footer.pug&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>其中:</p><ul><li><code>theme.*</code>为主题配置文件<code>_config.yml</code>中的参数</li><li><code>url_for</code>为<code>hexo</code>提供的用于查找资源路径的函数</li></ul><h2 class="heading" data-id="heading-14" id="3332286707"><span>总结<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#3332286707" class="esa-anchor">#</a></h2><p><code>pug</code>提供了包含，继承，Mixin等多种方式用于代码复用，语法简洁易懂，除了初学时需花费一些时间学习各种标点符号的含义外，其它倒也没有太大困难。</p><p>当然啦，<code>pug</code>还有许多其它特性，但就我目前使用情况而言，以上这些便已足够。</p><h2 class="heading" data-id="heading-15" id="507967610"><span>参考<button class="cnblogs-toc-button" title="显示目录导航"></button></span><a href="#507967610" class="esa-anchor">#</a></h2><ul><li><a href="https://pugjs.org/zh-cn/api/getting-started.html" rel="noopener nofollow" target="_blank">pugjs.org/zh-cn/api/g…</a></li><li><a href="https://hexo.io/zh-cn/docs/" rel="noopener nofollow" target="_blank">hexo.io/zh-cn/docs/</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello-word</title>
      <link href="/2024/09/19/hello-word/"/>
      <url>/2024/09/19/hello-word/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
